#include "speechManager.h"

SpeechMahager::SpeechMahager()
{
	this->initSpeech();

	this->createSpeaker();

	this->loadRecord();
}

void SpeechMahager::show_Menu()
{
	cout << "******************************************" << endl;
	cout << "************ 欢迎参加演讲比赛 ************" << endl;
	cout << "************ 1、开始演讲比赛  ************" << endl;
	cout << "************ 2、查看往届记录  ************" << endl;
	cout << "************ 3、清空比赛记录  ************" << endl;
	cout << "************ 0、退出比赛程序  ************" << endl;
	cout << "******************************************" << endl;
}

void SpeechMahager::exitSystem()
{
	cout << "欢迎下次使用" << endl;
	system("pause");
	exit(0);
}

void SpeechMahager::createSpeaker()
{
	string nameSeed = "ABCDEFGHIJKL";
	for (int i = 0; i < nameSeed.size(); i++)
	{
		string name = "选手";
		name += nameSeed[i];

		Speaker sp;
		sp.m_Name = name;

		for (int j = 0; j < 2; j++)
		{
			sp.m_Score[j] = 0;
		}

		this->v1.push_back(i + 10001);

		this->m_Speaker.insert(make_pair(i + 10001, sp));
	}
}

void SpeechMahager::startSpeech()
{
	//第一轮开始
	this->speechDraw();
	//1、抽签
	this->speechContest();
	//2、比赛
	this->show_Score();
	//3、显示晋级结果

	this->m_Index++;
	//第二轮开始
	this->speechDraw();
	//1、抽签
	this->speechContest();
	//2、比赛
	this->show_Score();
	//3、显示最终结果

	//保存结构到文件中
	this->saveRecord();

	cout << "本届比赛完毕" << endl;
	system("pause");
	system("cls");
}

void SpeechMahager::speechDraw()
{
	cout << "第 << " << this->m_Index << " >>轮比赛选手正在抽签" << endl;
	cout << "――――――――――――――" << endl;
	cout << "抽签后演讲顺序如下" << endl;

	if (this->m_Index == 1)
	{
		//第一轮比赛
		random_shuffle(v1.begin(), v1.end());
		for (vector<int>::iterator it = v1.begin(); it != v1.end(); it++)
		{
			cout << *it << " ";
		}
		cout << endl;
	}
	else
	{
		random_shuffle(v2.begin(), v2.end());
		for (vector<int>::iterator it = v2.begin(); it != v2.end(); it++)
		{
			cout << *it << " ";
		}
		cout << endl;
	}
	cout << "――――――――――――――" << endl;
	system("pause");
	cout << endl;
}

void SpeechMahager::speechContest()
{
	cout << "―――――― 第" << this->m_Index << "轮比赛正式开始――――――――" << endl;

	//临时容器存放选手成绩
	multimap<double, int, greater<double>>groupScpre;

	int num = 0;

	vector<int>v_Src;//选手容器
	if (this->m_Index == 1)
	{
		v_Src = v1;
	}
	else
	{
		v_Src = v2;
	}

	for (vector<int>::iterator it = v_Src.begin(); it != v_Src.end(); it++)
	{
		num++;

		deque<double>d;
		for (int i = 0; i < 10; i++)
		{
			double  score = (rand() % 401 + 600) / 10.f;
			d.push_back(score);
		}
		sort(d.begin(), d.end(), greater<double>());
		d.pop_back();
		d.pop_front();

		double sum = accumulate(d.begin(), d.end(), 0.0f);
		double avg = sum / (double)d.size();

		//将平均分放入map容器

		this->m_Speaker[*it].m_Score[this->m_Index - 1] = avg;
	
		groupScpre.insert(make_pair(avg, *it));

		if (num % 6 == 0)
		{
			cout << "第" << num / 6 << "小组比赛名次如下：" << endl;
			for (multimap<double, int, greater<double>>::iterator it = groupScpre.begin(); it != groupScpre.end(); it++)
			{
				cout << "编号：" << it->second << "姓名：" << this->m_Speaker[it->second].m_Name
					<<"成绩："<< this->m_Speaker[it->second].m_Score[m_Index - 1] << endl;
			}

			//取走前三名
			int count = 0;
			for (multimap<double, int, greater<double>>::iterator it = groupScpre.begin(); it != groupScpre.end()&&count!=3; it++,count++)
			{
				if (this->m_Index == 1)
				{
					v2.push_back((*it).second);
				}
				else
				{
					vVictory.push_back((*it).second);
				}
			}

			groupScpre.clear();

			cout << endl;
		}
	}
	cout << "――――――――第" << this->m_Index << "轮比赛完毕――――――――" << endl;
	system("pause");
}

void SpeechMahager::show_Score()
{
	cout << "――――――――――第" << this->m_Index << "轮晋级结果如下――――――――" << endl;

	vector<int>v;
	if (this->m_Index == 1)
	{
		v = v2;
	}
	else
	{
		v = vVictory;
	}
	for (vector<int>::iterator it = v.begin(); it != v.end();it++)
	{
		cout << "选手编号：" << *it << "姓名：" << this->m_Speaker[*it].m_Name << "分数：" << this->m_Speaker[*it].m_Score[this->m_Index-1] << endl;
	}
	cout << endl;

	system("pause");

	system("cls");

}

void SpeechMahager::saveRecord()
{
	ofstream ofs;
	ofs.open("speech.csv", ios::out | ios::app);
	//将每个选手数据写入文件
	for (vector<int>::iterator it = vVictory.begin(); it != vVictory.end(); it++)
	{
		ofs << *it << "," << this->m_Speaker[*it].m_Score[m_Index] << ",";

	}
	ofs << endl;

	ofs.close();
	cout << "记录完毕" << endl;
}

void SpeechMahager::initSpeech()
{
	this->v1.clear();
	this->v2.clear();
	this->vVictory.clear();
	this->m_Speaker.clear();

	this->m_Index = 1;
}

void SpeechMahager::loadRecord()
{
	ifstream ifs("speech.csv", ios::in);

	if (!ifs.is_open())
	{
		this->fileIsEmpty = true;
		cout << "文件不存在" << endl;
		ifs.close();
		return;
	}

	char ch;
	ifs >> ch;
	if (ifs.eof())
	{
		cout << "文件为空" << endl;
		this->fileIsEmpty = true;
		ifs.close();
		return;
	}

	this->fileIsEmpty = false;
	
	ifs.putback(ch);

	string data;
	int index = 0;

	while (ifs >> data)
	{
		//cout << data << endl;
		vector<string>v;

		int pos = -1;
		int start = 0;

		while (true)
		{
			pos = data.find(",", start);
			if (pos == -1)
			{
				break;
			}
			string tmp = data.substr(start, pos - start);

			v.push_back(tmp);
			start = pos + 1;
		}
		this->m_Record.insert(make_pair(index, v));
		index++;
	}
	ifs.close();
}

void SpeechMahager::showRecord()
{
	for (int i = 0; i < this->m_Record.size(); i++)
	{
		cout << "第" << i + 1 << "届"
			<< "冠军编号：" << this->m_Record[i][0] << "得分：" << this->m_Record[i][1] << " "
			<< "冠军编号：" << this->m_Record[i][2] << "得分：" << this->m_Record[i][1] << " "
			<< "冠军编号：" << this->m_Record[i][4] << "得分：" << this->m_Record[i][1] << endl;
	}
	system("pause");
	system("cls");
}

void SpeechMahager::clearRecord()
{
	cout << "确认清空" << endl;
	cout << "1、确认" << endl;
	cout << "2、返回" << endl;

	int select = 0;
	cin >> select;

	if (select == 1)
	{
		ofstream ofs("speech.csv", ios::trunc);
		ofs.close();

		this->initSpeech();

		this->createSpeaker();

		this->loadRecord();

		cout << "清空成功" << endl;
	}
	system("pause");
	system("cls");
}

SpeechMahager::~SpeechMahager()
{

}

